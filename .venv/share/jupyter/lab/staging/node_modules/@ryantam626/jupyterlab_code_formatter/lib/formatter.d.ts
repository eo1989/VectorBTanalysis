import { INotebookTracker, Notebook } from '@jupyterlab/notebook';
import JupyterlabCodeFormatterClient from './client';
import { IEditorTracker } from '@jupyterlab/fileeditor';
import { Widget } from '@lumino/widgets';
declare class JupyterlabCodeFormatter {
    protected client: JupyterlabCodeFormatterClient;
    protected working: boolean;
    constructor(client: JupyterlabCodeFormatterClient);
    protected formatCode(code: string[], formatter: string, options: any, notebook: boolean): Promise<any>;
}
export declare class JupyterlabNotebookCodeFormatter extends JupyterlabCodeFormatter {
    protected notebookTracker: INotebookTracker;
    constructor(client: JupyterlabCodeFormatterClient, notebookTracker: INotebookTracker);
    formatAction(config: any, formatter?: string): Promise<void>;
    formatSelectedCodeCells(config: any, formatter?: string, notebook?: Notebook): Promise<void>;
    formatAllCodeCells(config: any, formatter?: string, notebook?: Notebook): Promise<void>;
    private getCodeCells;
    private getNotebookType;
    private getDefaultFormatters;
    private formatCells;
    applicable(formatter: string, currentWidget: Widget): boolean;
}
export declare class JupyterlabFileEditorCodeFormatter extends JupyterlabCodeFormatter {
    protected editorTracker: IEditorTracker;
    constructor(client: JupyterlabCodeFormatterClient, editorTracker: IEditorTracker);
    formatAction(config: any, formatter: string): void;
    applicable(formatter: string, currentWidget: Widget): boolean;
}
export {};
