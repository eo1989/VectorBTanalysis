"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const apputils_1 = require("@jupyterlab/apputils");
class JupyterlabCodeFormatter {
    constructor(client) {
        this.client = client;
    }
    formatCode(code, formatter, options, notebook) {
        return this.client
            .request('format', 'POST', JSON.stringify({
            code,
            notebook,
            formatter,
            options
        }))
            .then(resp => JSON.parse(resp));
    }
}
class JupyterlabNotebookCodeFormatter extends JupyterlabCodeFormatter {
    constructor(client, notebookTracker) {
        super(client);
        this.notebookTracker = notebookTracker;
    }
    formatAction(config, formatter) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.formatCells(true, config, formatter);
        });
    }
    formatSelectedCodeCells(config, formatter, notebook) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.formatCells(true, config, formatter, notebook);
        });
    }
    formatAllCodeCells(config, formatter, notebook) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.formatCells(false, config, formatter, notebook);
        });
    }
    getCodeCells(selectedOnly = true, notebook) {
        if (!this.notebookTracker.currentWidget) {
            return [];
        }
        const codeCells = [];
        notebook = notebook || this.notebookTracker.currentWidget.content;
        notebook.widgets.forEach((cell) => {
            if (cell.model.type === 'code') {
                if (!selectedOnly || notebook.isSelectedOrActive(cell)) {
                    codeCells.push(cell);
                }
            }
        });
        return codeCells;
    }
    getNotebookType() {
        if (!this.notebookTracker.currentWidget) {
            return null;
        }
        const metadata = this.notebookTracker.currentWidget.content.model.metadata.toJSON();
        if (!metadata) {
            return null;
        }
        // prefer kernelspec language
        // @ts-ignore
        if (metadata.kernelspec && metadata.kernelspec.language) {
            // @ts-ignore
            return metadata.kernelspec.language.toLowerCase();
        }
        // otherwise, check language info code mirror mode
        // @ts-ignore
        if (metadata.language_info && metadata.language_info.codemirror_mode) {
            // @ts-ignore
            return metadata.language_info.codemirror_mode.name.toLowerCase();
        }
        return null;
    }
    getDefaultFormatters(config) {
        const notebookType = this.getNotebookType();
        if (notebookType) {
            const defaultFormatter = config.preferences.default_formatter[notebookType];
            if (defaultFormatter instanceof Array) {
                return defaultFormatter;
            }
            else if (defaultFormatter !== undefined) {
                return [defaultFormatter];
            }
        }
        return [];
    }
    formatCells(selectedOnly, config, formatter, notebook) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.working) {
                return;
            }
            try {
                this.working = true;
                const selectedCells = this.getCodeCells(selectedOnly, notebook);
                if (selectedCells.length === 0) {
                    this.working = false;
                    return;
                }
                const defaultFormatters = this.getDefaultFormatters(config);
                const formattersToUse = formatter !== undefined ? [formatter] : defaultFormatters;
                if (formattersToUse.length === 0) {
                    yield apputils_1.showErrorMessage('Jupyterlab Code Formatter Error', `Unable to find default formatters to use, please file an issue on GitHub.`);
                }
                for (let formatterToUse of formattersToUse) {
                    const currentTexts = selectedCells.map(cell => cell.model.value.text);
                    const formattedTexts = yield this.formatCode(currentTexts, formatterToUse, config[formatterToUse], true);
                    for (let i = 0; i < selectedCells.length; ++i) {
                        const cell = selectedCells[i];
                        const currentText = currentTexts[i];
                        const formattedText = formattedTexts.code[i];
                        if (cell.model.value.text === currentText) {
                            if (formattedText.error) {
                                yield apputils_1.showErrorMessage('Jupyterlab Code Formatter Error', formattedText.error);
                            }
                            else {
                                cell.model.value.text = formattedText.code;
                            }
                        }
                        else {
                            yield apputils_1.showErrorMessage('Jupyterlab Code Formatter Error', `Cell value changed since format request was sent, formatting for cell ${i} skipped.`);
                        }
                    }
                }
            }
            catch (error) {
                yield apputils_1.showErrorMessage('Jupyterlab Code Formatter Error', error);
            }
            this.working = false;
        });
    }
    applicable(formatter, currentWidget) {
        const currentNotebookWidget = this.notebookTracker.currentWidget;
        // TODO: Handle showing just the correct formatter for the language later
        return currentNotebookWidget && currentWidget === currentNotebookWidget;
    }
}
exports.JupyterlabNotebookCodeFormatter = JupyterlabNotebookCodeFormatter;
class JupyterlabFileEditorCodeFormatter extends JupyterlabCodeFormatter {
    constructor(client, editorTracker) {
        super(client);
        this.editorTracker = editorTracker;
    }
    formatAction(config, formatter) {
        if (this.working) {
            return;
        }
        const editorWidget = this.editorTracker.currentWidget;
        this.working = true;
        const editor = editorWidget.content.editor;
        const code = editor.model.value.text;
        this.formatCode([code], formatter, config[formatter], false)
            .then(data => {
            if (data.code[0].error) {
                void apputils_1.showErrorMessage('Jupyterlab Code Formatter Error', data.code[0].error);
                this.working = false;
                return;
            }
            this.editorTracker.currentWidget.content.editor.model.value.text =
                data.code[0].code;
            this.working = false;
        })
            .catch(error => {
            this.working = false;
            void apputils_1.showErrorMessage('Jupyterlab Code Formatter Error', error);
        });
    }
    applicable(formatter, currentWidget) {
        const currentEditorWidget = this.editorTracker.currentWidget;
        // TODO: Handle showing just the correct formatter for the language later
        return currentEditorWidget && currentWidget === currentEditorWidget;
    }
}
exports.JupyterlabFileEditorCodeFormatter = JupyterlabFileEditorCodeFormatter;
