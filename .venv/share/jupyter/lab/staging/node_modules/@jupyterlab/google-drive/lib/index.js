"use strict";
// Copyright (c) Jupyter Development Team.
// Distributed under the terms of the Modified BSD License.
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
require("../style/index.css");
const widgets_1 = require("@lumino/widgets");
const algorithm_1 = require("@lumino/algorithm");
const application_1 = require("@jupyterlab/application");
const apputils_1 = require("@jupyterlab/apputils");
const coreutils_1 = require("@jupyterlab/coreutils");
const settingregistry_1 = require("@jupyterlab/settingregistry");
const docmanager_1 = require("@jupyterlab/docmanager");
const filebrowser_1 = require("@jupyterlab/filebrowser");
const mainmenu_1 = require("@jupyterlab/mainmenu");
const browser_1 = require("./browser");
const drive_1 = require("./drive");
const contents_1 = require("./contents");
const gapi_1 = require("./gapi");
/**
 * The command IDs used by the plugins.
 */
var CommandIDs;
(function (CommandIDs) {
    CommandIDs.shareCurrent = `google-drive:share-current`;
    CommandIDs.shareBrowser = `google-drive:share-browser-item`;
})(CommandIDs || (CommandIDs = {}));
/**
 * The JupyterLab plugin for the Google Drive Filebrowser.
 */
const fileBrowserPlugin = {
    id: '@jupyterlab/google-drive:drive',
    requires: [
        apputils_1.ICommandPalette,
        docmanager_1.IDocumentManager,
        filebrowser_1.IFileBrowserFactory,
        application_1.ILayoutRestorer,
        mainmenu_1.IMainMenu,
        settingregistry_1.ISettingRegistry
    ],
    activate: activateFileBrowser,
    autoStart: true
};
/**
 * Activate the file browser.
 */
function activateFileBrowser(app, palette, manager, factory, restorer, mainMenu, settingRegistry) {
    const { commands } = app;
    const id = fileBrowserPlugin.id;
    // Load the Google Client libraries
    gapi_1.loadGapi();
    // Add the Google Drive backend to the contents manager.
    const drive = new contents_1.GoogleDrive(app.docRegistry);
    manager.services.contents.addDrive(drive);
    // Construct a function that determines whether any documents
    // associated with this filebrowser are currently open.
    const hasOpenDocuments = () => {
        const iterator = app.shell.widgets('main');
        let widget = iterator.next();
        while (widget) {
            const context = manager.contextForWidget(widget);
            if (context &&
                manager.services.contents.driveName(context.path) === drive.name) {
                return true;
            }
            widget = iterator.next();
        }
        return false;
    };
    // Create the file browser.
    const browser = new browser_1.GoogleDriveFileBrowser(drive.name, app.docRegistry, commands, manager, factory, settingRegistry.load(id), hasOpenDocuments);
    browser.title.iconClass = 'jp-GoogleDrive-icon jp-SideBar-tabIcon';
    browser.title.caption = 'Google Drive';
    browser.id = 'google-drive-file-browser';
    // Add the file browser widget to the application restorer.
    restorer.add(browser, browser_1.NAMESPACE);
    app.shell.add(browser, 'left', { rank: 101 });
    // Share files with another Google Drive user.
    const shareFiles = (paths) => __awaiter(this, void 0, void 0, function* () {
        // Only share files in Google Drive.
        const toShare = paths.filter(path => {
            if (manager.services.contents.driveName(path) !== drive.name) {
                // Don't share if this file is not in the user's Google Drive.
                console.warn(`Cannot share ${path} outside of Google Drive`);
                return false;
            }
            return true;
        });
        if (toShare.length === 0) {
            return;
        }
        // Otherwise open the sharing dialog and share the files.
        const name = toShare.length === 1 ? `"${coreutils_1.PathExt.basename(toShare[0])}"` : 'files';
        const result = yield apputils_1.showDialog({
            title: `Share ${name}`,
            body: new Private.EmailAddressWidget(),
            focusNodeSelector: 'input',
            buttons: [apputils_1.Dialog.cancelButton(), apputils_1.Dialog.okButton({ label: 'SHARE' })]
        });
        if (result.button.accept) {
            yield Promise.all(toShare.map((path) => __awaiter(this, void 0, void 0, function* () {
                // Get the file resource for the path and create
                // permissions for the valid email addresses.
                const addresses = result.value;
                const localPath = manager.services.contents.localPath(path);
                const resource = yield drive_1.getResourceForPath(localPath);
                yield drive_1.createPermissions(resource, addresses);
            })));
        }
        return;
    });
    // Add the share-current command to the command registry.
    commands.addCommand(CommandIDs.shareCurrent, {
        execute: () => {
            const widget = app.shell.currentWidget;
            const context = widget ? manager.contextForWidget(widget) : undefined;
            if (context) {
                return shareFiles([context.path]);
            }
        },
        isEnabled: () => {
            const { currentWidget } = app.shell;
            if (!currentWidget) {
                return false;
            }
            const context = manager.contextForWidget(currentWidget);
            if (!context) {
                return false;
            }
            return manager.services.contents.driveName(context.path) === drive.name;
        },
        label: () => {
            const { currentWidget } = app.shell;
            let fileType = 'File';
            if (currentWidget) {
                const context = manager.contextForWidget(currentWidget);
                if (context) {
                    const fts = app.docRegistry.getFileTypesForPath(context.path);
                    if (fts.length && fts[0].displayName) {
                        fileType = fts[0].displayName;
                    }
                }
            }
            return `Share ${fileType} with Google Drive…`;
        }
    });
    // Add the share-browser command to the command registry.
    commands.addCommand(CommandIDs.shareBrowser, {
        execute: () => {
            const browser = factory.tracker.currentWidget;
            if (!browser || browser.model.driveName !== drive.name) {
                return;
            }
            const paths = algorithm_1.toArray(algorithm_1.map(browser.selectedItems(), item => item.path));
            return shareFiles(paths);
        },
        iconClass: 'jp-MaterialIcon jp-GoogleDrive-icon',
        isEnabled: () => {
            const browser = factory.tracker.currentWidget;
            return !!browser && browser.model.driveName === drive.name;
        },
        label: 'Share with Google Drive…'
    });
    // matches only non-directory items in the Google Drive browser.
    const selector = '.jp-GoogleDriveFileBrowser .jp-DirListing-item[data-isdir="false"]';
    app.contextMenu.addItem({
        command: CommandIDs.shareBrowser,
        selector,
        rank: 100
    });
    palette.addItem({
        command: CommandIDs.shareCurrent,
        category: 'File Operations'
    });
    mainMenu.fileMenu.addGroup([{ command: CommandIDs.shareCurrent }], 20);
    return;
}
/**
 * Export the plugins as default.
 */
const plugins = [fileBrowserPlugin];
exports.default = plugins;
/**
 * A namespace for private data.
 */
var Private;
(function (Private) {
    /**
     * A widget the reads and parses email addresses.
     */
    class EmailAddressWidget extends widgets_1.Widget {
        /**
         * Construct a new EmailAddressWidget.
         */
        constructor() {
            super();
            const text = document.createElement('p');
            text.textContent =
                'Enter collaborator Gmail address. ' +
                    'Multiple addresses may be separated by commas';
            this._inputNode = document.createElement('input');
            this.node.appendChild(text);
            this.node.appendChild(this._inputNode);
            // Set 'multiple' and 'type=email' attributes,
            // which strips leading and trailing whitespace from
            // the email adresses.
            this._inputNode.setAttribute('type', 'email');
            this._inputNode.setAttribute('multiple', '');
        }
        /**
         * Get the value for the widget.
         */
        getValue() {
            // Pick out the valid email addresses
            const candidateAddresses = this._inputNode.value.split(',');
            const addresses = [];
            for (let address of candidateAddresses) {
                if (isEmail(address)) {
                    addresses.push(address);
                }
                else {
                    console.warn(`"${address}" is not a valid email address`);
                }
            }
            return addresses;
        }
    }
    Private.EmailAddressWidget = EmailAddressWidget;
    /**
     * Return whether an email address is valid.
     * Uses a regexp given in the html spec here:
     * https://html.spec.whatwg.org/multipage/input.html#e-mail-state-(type=email)
     *
     * #### Notes: this is not a perfect test, but it should be
     *   good enough for most use cases.
     *
     * @param email: the canditate email address.
     *
     * @returns a boolean for whether it is a valid email.
     */
    function isEmail(email) {
        const re = RegExp(/^[a-zA-Z0-9.!#$%&'*+\/=?^_`{|}~-]+@[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(?:\.[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?)*$/);
        return re.test(email);
    }
})(Private || (Private = {}));
