import { JupyterFrontEnd, JupyterFrontEndPlugin } from '@jupyterlab/application';
import { ICommandPalette } from '@jupyterlab/apputils';
import { ISettingRegistry } from '@jupyterlab/settingregistry';
import { IDocumentManager } from '@jupyterlab/docmanager';
import { LanguageServerManager } from './manager';
import '../style/index.css';
import { ContextCommandManager } from './command_manager';
import { IStatusBar } from '@jupyterlab/statusbar';
import { DocumentConnectionManager } from './connection_manager';
import { ILSPAdapterManager, ILSPCodeExtractorsManager, ILSPFeatureManager, ILSPVirtualEditorManager } from './tokens';
import { IFeature } from './feature';
import IPaths = JupyterFrontEnd.IPaths;
import { LabIcon } from '@jupyterlab/ui-components';
import { IForeignCodeExtractorsRegistry } from './extractors/types';
import { ILSPCodeOverridesManager, ICodeOverridesRegistry } from './overrides/tokens';
export declare const codeCheckIcon: LabIcon;
export interface IFeatureOptions {
    /**
     * The feature to be registered.
     */
    feature: IFeature;
    /**
     * Identifiers (values of `JupyterFrontEndPlugin.id` field) of the features
     * that your feature wants to disable; use it to override the default feature
     * implementations with your custom implementation (e.g. a custom completer)
     */
    supersedes?: string[];
}
export declare class FeatureManager implements ILSPFeatureManager {
    features: Array<IFeature>;
    private command_managers;
    private command_manager_registered;
    constructor();
    register(options: IFeatureOptions): void;
    registerCommandManager(manager: ContextCommandManager): void;
}
export interface ILSPExtension {
    app: JupyterFrontEnd;
    connection_manager: DocumentConnectionManager;
    language_server_manager: LanguageServerManager;
    feature_manager: ILSPFeatureManager;
    editor_type_manager: ILSPVirtualEditorManager;
    foreign_code_extractors: IForeignCodeExtractorsRegistry;
    code_overrides: ICodeOverridesRegistry;
}
export declare class LSPExtension implements ILSPExtension {
    app: JupyterFrontEnd;
    private setting_registry;
    editor_type_manager: ILSPVirtualEditorManager;
    private code_extractors_manager;
    private code_overrides_manager;
    connection_manager: DocumentConnectionManager;
    language_server_manager: LanguageServerManager;
    feature_manager: ILSPFeatureManager;
    constructor(app: JupyterFrontEnd, setting_registry: ISettingRegistry, palette: ICommandPalette, documentManager: IDocumentManager, paths: IPaths, status_bar: IStatusBar, adapterManager: ILSPAdapterManager, editor_type_manager: ILSPVirtualEditorManager, code_extractors_manager: ILSPCodeExtractorsManager, code_overrides_manager: ILSPCodeOverridesManager);
    get foreign_code_extractors(): IForeignCodeExtractorsRegistry;
    get code_overrides(): ICodeOverridesRegistry;
    private updateOptions;
}
declare const plugins: JupyterFrontEndPlugin<any>[];
/**
 * Export the plugins as default.
 */
export default plugins;
