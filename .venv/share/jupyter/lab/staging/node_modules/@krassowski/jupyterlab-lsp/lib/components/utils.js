import React from 'react';
export function get_breadcrumbs(document, adapter) {
    return document.ancestry.map((document) => {
        if (!document.parent) {
            let path = document.path;
            if (!document.has_lsp_supported_file &&
                path.endsWith(document.file_extension)) {
                path = path.slice(0, -document.file_extension.length - 1);
            }
            return React.createElement("span", { key: document.uri }, path);
        }
        if (!document.virtual_lines.size) {
            return React.createElement("span", { key: document.uri }, "Empty document");
        }
        try {
            if (adapter.has_multiple_editors) {
                let first_line = document.virtual_lines.get(0);
                let last_line = document.virtual_lines.get(document.last_virtual_line - 1);
                let first_cell = adapter.get_editor_index(first_line.editor);
                let last_cell = adapter.get_editor_index(last_line.editor);
                let cell_locator = first_cell === last_cell
                    ? `cell ${first_cell + 1}`
                    : `cells: ${first_cell + 1}-${last_cell + 1}`;
                return (React.createElement("span", { key: document.uri },
                    document.language,
                    " (",
                    cell_locator,
                    ")"));
            }
        }
        catch (e) {
            console.warn('LSP: could not display document cell location', e);
        }
        return React.createElement("span", { key: document.uri }, document.language);
    });
}
export function focus_on(node) {
    if (!node) {
        return;
    }
    node.scrollIntoView();
    node.focus();
}
export function DocumentLocator(props) {
    let { document, adapter } = props;
    let target = null;
    if (adapter.has_multiple_editors) {
        let first_line = document.virtual_lines.get(0);
        target = adapter.get_editor_wrapper(first_line.editor);
    }
    let breadcrumbs = get_breadcrumbs(document, adapter);
    return (React.createElement("div", { className: 'lsp-document-locator', onClick: () => focus_on(target ? target : null) }, breadcrumbs));
}
//# sourceMappingURL=utils.js.map