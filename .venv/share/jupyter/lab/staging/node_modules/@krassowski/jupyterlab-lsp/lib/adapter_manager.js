import { ILSPAdapterManager, PLUGIN_ID } from './tokens';
import { Signal } from '@lumino/signaling';
import { ILabShell } from '@jupyterlab/application';
export class WidgetAdapterManager {
    constructor(labShell) {
        this.labShell = labShell;
        this.adapters = new Map();
        this.adapterChanged = new Signal(this);
        this.adapterDisposed = new Signal(this);
        this.adapterTypeAdded = new Signal(this);
        this.adapterTypes = [];
        labShell.currentChanged.connect(this.refreshAdapterFromCurrentWidget, this);
    }
    get types() {
        return this.adapterTypes;
    }
    registerAdapterType(options) {
        this.adapterTypes.push(options);
        this.adapterTypeAdded.emit(options);
    }
    connect(extension, type) {
        type.tracker.widgetAdded.connect((tracker, widget) => {
            this.connectWidget(extension, widget, type);
        });
    }
    registerExtension(extension) {
        for (let type of this.adapterTypes) {
            this.connect(extension, type);
        }
        this.adapterTypeAdded.connect((manager, type) => {
            this.connect(extension, type);
        });
    }
    connectWidget(extension, widget, type) {
        let adapter = new type.adapter(extension, widget);
        this.registerAdapter({
            adapter: adapter,
            id: type.get_id(widget),
            re_connector: () => {
                this.connectWidget(extension, widget, type);
            }
        });
        // possibly update the value of currentAdapter using the current widget
        this.refreshAdapterFromCurrentWidget();
    }
    refreshAdapterFromCurrentWidget() {
        const current = this.labShell.currentWidget;
        if (!current) {
            return;
        }
        let adapter = null;
        for (let type of this.adapterTypes) {
            if (type.tracker.has(current)) {
                let id = type.get_id(current);
                adapter = this.adapters.get(id);
            }
        }
        if (adapter != null) {
            this.currentAdapter = adapter;
            this.adapterChanged.emit(adapter);
        }
    }
    registerAdapter(options) {
        let { id, adapter, re_connector } = options;
        let widget = options.adapter.widget;
        if (this.adapters.has(id)) {
            let old = this.adapters.get(id);
            console.warn(`Adapter with id ${id} was already registered (${adapter} vs ${old}) `);
        }
        this.adapters.set(id, adapter);
        const disconnect = () => {
            this.adapters.delete(id);
            widget.disposed.disconnect(disconnect);
            widget.context.pathChanged.disconnect(reconnect);
            adapter.dispose();
        };
        const reconnect = () => {
            disconnect();
            re_connector();
        };
        widget.disposed.connect(() => {
            disconnect();
            this.adapterDisposed.emit(adapter);
        });
        widget.context.pathChanged.connect(reconnect);
        // TODO: maybe emit adapterCreated. Should it be handled by statusbar?
    }
    isAnyActive() {
        return (this.labShell.currentWidget &&
            this.adapterTypes.some(type => type.tracker.currentWidget) &&
            this.adapterTypes.some(type => type.tracker.currentWidget == this.labShell.currentWidget));
    }
}
export const WIDGET_ADAPTER_MANAGER = {
    id: PLUGIN_ID + ':ILSPAdapterManager',
    requires: [ILabShell],
    activate: (app, labShell) => {
        return new WidgetAdapterManager(labShell);
    },
    provides: ILSPAdapterManager,
    autoStart: true
};
//# sourceMappingURL=adapter_manager.js.map