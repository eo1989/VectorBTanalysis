import { ExtendedCompletionTriggerKind } from '../../lsp';
import * as CodeMirror from 'codemirror';
import { CodeMirrorIntegration } from '../../editor_integration/codemirror';
import { JupyterFrontEnd } from '@jupyterlab/application';
import { IEditorChangedData, WidgetAdapter } from '../../adapters/adapter';
import { LSPConnector } from './completion_handler';
import { ICompletionManager } from '@jupyterlab/completer';
import { IDocumentWidget } from '@jupyterlab/docregistry';
import { FeatureSettings, IFeatureLabIntegration } from '../../feature';
import { CodeCompletion as LSPCompletionSettings } from '../../_completion';
import { IDocumentConnectionData } from '../../connection_manager';
import { ILSPAdapterManager } from '../../tokens';
import { ILSPCompletionThemeManager } from '@krassowski/completion-theme/lib/types';
export declare class CompletionCM extends CodeMirrorIntegration {
    private _completionCharacters;
    settings: FeatureSettings<LSPCompletionSettings>;
    get completionCharacters(): string[];
    afterChange(change: CodeMirror.EditorChange): void;
}
export declare class CompletionLabIntegration implements IFeatureLabIntegration {
    private app;
    private completionManager;
    settings: FeatureSettings<LSPCompletionSettings>;
    private adapterManager;
    private completionThemeManager;
    protected current_completion_connector: LSPConnector;
    protected current_completion_handler: ICompletionManager.ICompletableAttributes;
    protected current_adapter: WidgetAdapter<IDocumentWidget>;
    constructor(app: JupyterFrontEnd, completionManager: ICompletionManager, settings: FeatureSettings<LSPCompletionSettings>, adapterManager: ILSPAdapterManager, completionThemeManager: ILSPCompletionThemeManager);
    private swap_adapter;
    connect_completion(adapter: WidgetAdapter<IDocumentWidget>, data?: IDocumentConnectionData): void;
    invoke_completer(kind: ExtendedCompletionTriggerKind): Promise<any>;
    set_connector(adapter: WidgetAdapter<IDocumentWidget>, editor_changed: IEditorChangedData): void;
    private set_completion_connector;
}
