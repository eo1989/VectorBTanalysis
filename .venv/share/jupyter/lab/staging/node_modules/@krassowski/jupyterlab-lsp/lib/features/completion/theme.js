import { LabIcon } from '@jupyterlab/ui-components';
import { IThemeManager } from '@jupyterlab/apputils';
import { Token } from '@lumino/coreutils';
import { PLUGIN_ID } from '../../tokens';
export const ILSPCompletionIconsManager = new Token(PLUGIN_ID + ':ILSPCompletionIconsManager');
export class CompletionIconManager {
    constructor(themeManager) {
        this.themeManager = themeManager;
        this.themes = new Map();
        this.icons_cache = new Map();
        themeManager.themeChanged.connect(this.update_icons_set, this);
    }
    is_theme_light() {
        const current = this.themeManager.theme;
        if (!current) {
            // assume true by default
            return true;
        }
        return this.themeManager.isLight(current);
    }
    create_icons(icon_set) {
        const icons = new Map();
        const mode = this.is_theme_light() ? 'light' : 'dark';
        for (let [completion_kind, svg] of Object.entries(icon_set)) {
            let name = 'lsp:' +
                this.current_theme_id +
                '-' +
                completion_kind.toLowerCase() +
                '-' +
                mode;
            let icon;
            if (this.icons_cache.has(name)) {
                icon = this.icons_cache.get(name);
            }
            else {
                icon = new LabIcon({
                    name: name,
                    svgstr: svg
                });
                this.icons_cache.set(name, icon);
            }
            icons.set(completion_kind, icon);
        }
        return icons;
    }
    update_icons_set() {
        if (this.current_theme === null) {
            return;
        }
        const icons_sets = this.current_theme.icons;
        const dark_mode_and_dark_supported = !this.is_theme_light() && typeof icons_sets.dark !== 'undefined';
        const set = dark_mode_and_dark_supported
            ? icons_sets.dark
            : icons_sets.light;
        this.current_icons = this.create_icons(set);
    }
    get_icon(type) {
        if (this.current_theme === null) {
            return null;
        }
        let options = this.current_theme.icons.options || {};
        console.log(options);
        if (this.current_icons.has(type)) {
            return this.current_icons.get(type).bindprops(options);
        }
        return null;
    }
    get current_theme_class() {
        return 'lsp-completer-theme-' + this.current_theme_id;
    }
    set_icon_theme(id) {
        if (this.current_theme_id) {
            document.body.classList.remove(this.current_theme_class);
        }
        if (!this.themes.has(id)) {
            console.warn(`[LSP][Completer] Icons theme ${id} cannot be set yet (it may be loaded later).`);
        }
        this.current_theme_id = id;
        document.body.classList.add(this.current_theme_class);
        this.update_icons_set();
    }
    get current_theme() {
        if (this.themes.has(this.current_theme_id)) {
            return this.themes.get(this.current_theme_id);
        }
        return null;
    }
    register_theme(theme) {
        if (this.themes.has(theme.id)) {
            console.warn('Theme with name', theme.id, 'was already registered, overwriting.');
        }
        this.themes.set(theme.id, theme);
        this.update_icons_set();
    }
    // TODO:
    //  - make the display part of the interface and also display license
    //    of each theme rather than having a it for entire LSP
    //  - make the themes packages NOW
    //  - chnage type to kernel rather than keeping <unknown>!
    /**
     * Display the registered themes in a dialog,
     * both for the user to know what they can choose from,
     * and for the developer to quickly check how the icons
     * from each them look rendered.
     */
    display_themes() {
    }
}
export const COMPLETION_ICONS_MANAGER = {
    id: PLUGIN_ID + ':ILSPCompletionIconsManager',
    requires: [IThemeManager],
    activate: (app, themeManager) => {
        return new CompletionIconManager(themeManager);
    },
    provides: ILSPCompletionIconsManager,
    autoStart: true
};
//# sourceMappingURL=theme.js.map