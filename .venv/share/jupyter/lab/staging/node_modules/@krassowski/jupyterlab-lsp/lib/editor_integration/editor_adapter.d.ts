import IEditor = CodeEditor.IEditor;
import { IEditorChange, IVirtualEditor } from '../virtual/editor';
import { IFeatureEditorIntegration } from '../feature';
import { CodeEditor } from '@jupyterlab/codeeditor';
import { VirtualDocument } from '../virtual/document';
import { EditorLogConsole } from '../virtual/console';
export declare class EditorAdapter<T extends IVirtualEditor<IEditor>> {
    protected editor: IVirtualEditor<CodeEditor.IEditor>;
    protected virtual_document: VirtualDocument;
    features: Map<string, IFeatureEditorIntegration<T>>;
    isDisposed: boolean;
    /**
     * Console for debugging.
     */
    console: EditorLogConsole;
    private last_change;
    constructor(editor: IVirtualEditor<CodeEditor.IEditor>, virtual_document: VirtualDocument, features?: IFeatureEditorIntegration<T>[]);
    updateAfterChange(): Promise<boolean>;
    invalidateLastChange(): void;
    saveChange(sender: IVirtualEditor<IEditor>, change: IEditorChange): void;
    dispose(): void;
}
