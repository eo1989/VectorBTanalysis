import { JupyterFrontEnd } from '@jupyterlab/application';
import { ICommandPalette } from '@jupyterlab/apputils';
import { ISettingRegistry } from '@jupyterlab/settingregistry';
import { IDocumentManager } from '@jupyterlab/docmanager';
import { Signal } from '@lumino/signaling';
import { LanguageServerManager } from './manager';
import '../style/index.css';
import { ContextCommandManager } from './command_manager';
import { IStatusBar } from '@jupyterlab/statusbar';
import { LSPStatus } from './components/statusbar';
import { DocumentConnectionManager } from './connection_manager';
import { ILSPAdapterManager, ILSPCodeExtractorsManager, ILSPFeatureManager, ILSPVirtualEditorManager, PLUGIN_ID } from './tokens';
import { JUMP_PLUGIN } from './features/jump_to';
import { SIGNATURE_PLUGIN } from './features/signature';
import { HOVER_PLUGIN } from './features/hover';
import { RENAME_PLUGIN } from './features/rename';
import { HIGHLIGHTS_PLUGIN } from './features/highlights';
import { WIDGET_ADAPTER_MANAGER } from './adapter_manager';
import { FILE_EDITOR_ADAPTER } from './adapters/file_editor';
import { NOTEBOOK_ADAPTER } from './adapters/notebook';
import { VIRTUAL_EDITOR_MANAGER } from './virtual/editor';
var IPaths = JupyterFrontEnd.IPaths;
import { CODEMIRROR_VIRTUAL_EDITOR } from './virtual/codemirror_editor';
import { LabIcon } from '@jupyterlab/ui-components';
import codeCheckSvg from '../style/icons/code-check.svg';
import { DIAGNOSTICS_PLUGIN } from './features/diagnostics';
import { COMPLETION_PLUGIN } from './features/completion';
import { CODE_EXTRACTORS_MANAGER } from './extractors/manager';
import { ILSPCodeOverridesManager } from './overrides/tokens';
import { DEFAULT_TRANSCLUSIONS } from './transclusions/defaults';
import { SYNTAX_HIGHLIGHTING_PLUGIN } from './features/syntax_highlighting';
import { COMPLETION_THEME_MANAGER } from '@krassowski/completion-theme';
import { plugin as THEME_VSCODE } from '@krassowski/theme-vscode';
import { plugin as THEME_MATERIAL } from '@krassowski/theme-material';
import { CODE_OVERRIDES_MANAGER } from './overrides';
export const codeCheckIcon = new LabIcon({
    name: 'lsp:codeCheck',
    svgstr: codeCheckSvg
});
export class FeatureManager {
    constructor() {
        this.features = [];
        this.command_managers = [];
        this.command_manager_registered = new Signal(this);
    }
    register(options) {
        if (options.supersedes) {
            for (let option of options.supersedes) {
                this.features = this.features.filter(feature => feature.id != option);
            }
        }
        this.features.push(options.feature);
        if (options.feature.commands) {
            for (let command_manager of this.command_managers) {
                command_manager.add(options.feature.commands);
            }
            this.command_manager_registered.connect((feature_manager, command_manager) => {
                command_manager.add(options.feature.commands);
            });
        }
    }
    registerCommandManager(manager) {
        this.command_managers.push(manager);
        this.command_manager_registered.emit(manager);
    }
}
export class LSPExtension {
    constructor(app, setting_registry, palette, documentManager, paths, status_bar, adapterManager, editor_type_manager, code_extractors_manager, code_overrides_manager) {
        this.app = app;
        this.setting_registry = setting_registry;
        this.editor_type_manager = editor_type_manager;
        this.code_extractors_manager = code_extractors_manager;
        this.code_overrides_manager = code_overrides_manager;
        this.language_server_manager = new LanguageServerManager({});
        this.connection_manager = new DocumentConnectionManager({
            language_server_manager: this.language_server_manager
        });
        const status_bar_item = new LSPStatus(adapterManager);
        status_bar_item.model.language_server_manager = this.language_server_manager;
        status_bar_item.model.connection_manager = this.connection_manager;
        status_bar.registerStatusItem(PLUGIN_ID + ':language-server-status', {
            item: status_bar_item,
            align: 'left',
            rank: 1,
            isActive: () => adapterManager.isAnyActive()
        });
        this.feature_manager = new FeatureManager();
        this.setting_registry
            .load(plugin.id)
            .then(settings => {
            // Store the initial server settings, to be sent asynchronously
            // when the servers are initialized.
            this.connection_manager.initial_configurations = (settings.composite
                .language_servers || {});
            settings.changed.connect(() => {
                this.updateOptions(settings);
            });
        })
            .catch((reason) => {
            console.error(reason.message);
        });
        adapterManager.registerExtension(this);
        adapterManager.adapterTypeAdded.connect((manager, type) => {
            let command_manger = new ContextCommandManager(Object.assign({ adapter_manager: adapterManager, app: app, palette: palette, tracker: type.tracker, suffix: type.name, entry_point: type.entrypoint }, type.context_menu));
            this.feature_manager.registerCommandManager(command_manger);
        });
    }
    get foreign_code_extractors() {
        return this.code_extractors_manager.registry;
    }
    get code_overrides() {
        return this.code_overrides_manager.registry;
    }
    updateOptions(settings) {
        const options = settings.composite;
        const languageServerSettings = (options.language_servers ||
            {});
        this.connection_manager.updateServerConfigurations(languageServerSettings);
    }
}
/**
 * The plugin registration information.
 */
const plugin = {
    id: PLUGIN_ID + ':plugin',
    requires: [
        ISettingRegistry,
        ICommandPalette,
        IDocumentManager,
        IPaths,
        IStatusBar,
        ILSPAdapterManager,
        ILSPVirtualEditorManager,
        ILSPCodeExtractorsManager,
        ILSPCodeOverridesManager
    ],
    activate: (app, ...args) => {
        let extension = new LSPExtension(app, ...args);
        return extension.feature_manager;
    },
    provides: ILSPFeatureManager,
    autoStart: true
};
const default_features = [
    JUMP_PLUGIN,
    COMPLETION_PLUGIN,
    SIGNATURE_PLUGIN,
    HOVER_PLUGIN,
    RENAME_PLUGIN,
    HIGHLIGHTS_PLUGIN,
    DIAGNOSTICS_PLUGIN,
    SYNTAX_HIGHLIGHTING_PLUGIN
];
const plugins = [
    CODE_EXTRACTORS_MANAGER,
    WIDGET_ADAPTER_MANAGER,
    NOTEBOOK_ADAPTER,
    FILE_EDITOR_ADAPTER,
    VIRTUAL_EDITOR_MANAGER,
    CODEMIRROR_VIRTUAL_EDITOR,
    COMPLETION_THEME_MANAGER,
    THEME_VSCODE,
    THEME_MATERIAL,
    CODE_OVERRIDES_MANAGER,
    plugin,
    ...DEFAULT_TRANSCLUSIONS,
    ...default_features
];
/**
 * Export the plugins as default.
 */
export default plugins;
//# sourceMappingURL=index.js.map