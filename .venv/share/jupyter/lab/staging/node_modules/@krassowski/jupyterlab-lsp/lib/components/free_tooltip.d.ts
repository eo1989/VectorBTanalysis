import { Tooltip } from '@jupyterlab/tooltip';
import { CodeEditor } from '@jupyterlab/codeeditor';
import * as lsProtocol from 'vscode-languageserver-protocol';
import { IEditorPosition } from '../positioning';
import { IRenderMimeRegistry } from '@jupyterlab/rendermime';
import { ILSPAdapterManager } from '../tokens';
interface IFreeTooltipOptions extends Tooltip.IOptions {
    /**
     * Position at which the tooltip should be placed, or null (default) to use the current cursor position.
     */
    position: CodeEditor.IPosition | null;
    /**
     * Should the tooltip be placed at the end of the line indicated by position?
     */
    moveToLineEnd: boolean;
}
/**
 * Tooltip which can be placed  at any character, not only at the current position (derived from getCursorPosition)
 */
export declare class FreeTooltip extends Tooltip {
    position: CodeEditor.IPosition | null;
    movetoLineEnd: boolean;
    constructor(options: IFreeTooltipOptions);
    private _setGeometry;
}
export declare namespace EditorTooltip {
    interface IOptions {
        markup: lsProtocol.MarkupContent;
        ce_editor: CodeEditor.IEditor;
        position: IEditorPosition;
    }
}
export declare class EditorTooltipManager {
    private rendermime_registry;
    private adapterManager;
    private currentTooltip;
    constructor(rendermime_registry: IRenderMimeRegistry, adapterManager: ILSPAdapterManager);
    create(options: EditorTooltip.IOptions): FreeTooltip;
    remove(): void;
}
export {};
